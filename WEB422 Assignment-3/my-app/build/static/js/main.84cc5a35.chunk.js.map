{"version":3,"sources":["serviceWorker.js","Cards.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","outline","heading","formControl","maxWidth","minWidth","marginBottom","icon","marginRight","heroContent","button","margin","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardContent","flexGrow","TeamCard","props","_React$useState","React","useState","teamid","TeamLead","_React$useState2","Object","slicedToArray","setTeamLead","_React$useState3","employees","_React$useState4","Employee","setEmployees","_React$useState5","projects","_React$useState6","Projects","setProjects","employeeArray","slice","projectsArray","classes","react_default","a","createElement","Fragment","Container","className","Card","CardContent","CardHeader","title","TeamName","FormControl","variant","InputLabel","htmlFor","Select","single","autoWidth","value","onChange","event","target","input","Input","id","renderValue","selected","i","length","_id","FirstName","LastName","RetrieveTeamLeadName","map","emp","MenuItem","key","ListItemText","primary","multiple","RetrieveEmployeeName","flex","ProjectName","RetrieveProjectName","Button","color","onClick","axios","put","Employees","then","response","alert","data","message","catch","err","App","state","teams","errors","_this2","this","get","setState","_this3","_this4","getTeams","getEmployees","getProjects","_this$state","CssBaseline","AppBar","Toolbar","Typography","noWrap","team","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2IAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oPCHAC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CAErCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,UAAWP,EAAMQ,QAAQ,GACzBC,QAAST,EAAMU,QAAQ,GACvBC,QAAS,QAGXC,QAAQ,CACNH,QAAST,EAAMU,QAAQ,EAAE,GAAG,IAG9BG,YAAa,CACXC,SAAU,OACVC,SAAU,IACVC,aAAchB,EAAMU,QAAQ,IAE9BO,KAAM,CACJC,YAAalB,EAAMU,QAAQ,IAE7BS,YAAa,CACXf,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CQ,QAAST,EAAMU,QAAQ,EAAG,EAAG,IAE/BU,OAAQ,CACNC,OAAQrB,EAAMU,QAAQ,EAAE,GAAG,IAE7BY,SAAU,CACRC,WAAYvB,EAAMU,QAAQ,GAC1Bc,cAAexB,EAAMU,QAAQ,IAE/Be,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,OAEjBC,YAAa,CACXC,SAAU,MAMC,SAASC,EAASC,GAAO,IAAAC,EAENC,IAAMC,SAASH,EAAMI,OAAOC,UAFtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAE/BI,EAF+BC,EAAA,GAErBG,EAFqBH,EAAA,GAAAI,EAINR,IAAMC,SAASH,EAAMW,WAJfC,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAI/BG,EAJ+BD,EAAA,GAItBE,EAJsBF,EAAA,GAAAG,EAMNb,IAAMC,SAASH,EAAMgB,UANfC,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAM/BG,EAN+BD,EAAA,GAMrBE,EANqBF,EAAA,GAQlCG,EAAepB,EAAMW,UAAWU,MAAM,GACtCC,EAAetB,EAAMgB,SAAUK,MAAM,GAczC,IAAME,EAAUzD,IA0ChB,OAEE0D,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,UAAWN,EAAQjC,SAAUR,SAAS,MACjD0C,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaF,UAAWN,EAAQ1B,aAChC2B,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYH,UAAWN,EAAQ3C,QAASqD,MAAOjC,EAAMI,OAAO8B,UAA5D,KAIUV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaC,QAAQ,WAAWP,UAAWN,EAAQ1C,aACnD2C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYC,QAAQ,oBAApB,aACAd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACAH,QAAQ,WACRI,OAAO,OACPC,WAAW,EACXC,MAAOrC,EACPsC,SAxElB,SAAwBC,GACtBnC,EAAYmC,EAAMC,OAAOH,QAwETI,MAAOtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,MACPC,GAAG,mBACHC,YAAa,SAAAC,GAAQ,OA7DvC,SAA8BF,GAE5B,IAAI,IAAIG,EAAG,EAAIA,EAAG/B,EAAcgC,OAAQD,IACtC,GAAI/B,EAAc+B,GAAGE,KAAOL,EAC1B,OAAO5B,EAAc+B,GAAGG,UAAW,IAAKlC,EAAc+B,GAAGI,SAyDpBC,CAAqBN,KAEpClD,EAAMW,UAAU8C,IAAI,SAAAC,GAAG,OACrBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUC,IAAKF,EAAKhB,MAAOgB,GACzBlC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAcD,IAAKF,EAAKI,QAASJ,EAAIJ,UAAY,IAAMI,EAAIH,gBAM7E/B,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaC,QAAQ,WAAWP,UAAWN,EAAQ1C,aACnD2C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,QAAQ,sBAArB,WACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACAG,MAAO7B,EACP8B,SArFlB,SAAwBC,GACtB9B,EAAa8B,EAAMC,OAAOH,QAqFVqB,UAAQ,EACRtB,WAAW,EACXK,MAAOtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,MACPC,GAAG,qBACHZ,QAAQ,WACRa,YAAa,SAAAC,GAAQ,OAvEvC,SAA8BF,GAC5B,IAAI,IAAIG,EAAG,EAAIA,EAAG/B,EAAcgC,OAAQD,IACtC,GAAI/B,EAAc+B,GAAGE,KAAOL,EAC1B,OAAO5B,EAAc+B,GAAGG,UAAW,IAAKlC,EAAc+B,GAAGI,SAoEpBS,CAAqBd,KAEzClD,EAAMW,UAAU8C,IAAI,SAAAC,GAAG,OACtBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUC,IAAKF,EAAKhB,MAAOgB,GACzBlC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAcD,IAAKF,EAAKI,QAASJ,EAAIJ,UAAY,IAAMI,EAAIH,gBAMvE/B,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaC,QAAQ,WAAWP,UAAWN,EAAQ1C,aACnD2C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAa4B,KAAK,OAAO3B,QAAQ,uBAAjC,YACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACAS,GAAG,sBACHN,MAAOxB,EACPyB,SAtGlB,SAAuBC,GACrBzB,EAAYyB,EAAMC,OAAOH,QAsGTF,OAAO,OACPC,WAAW,EACXL,QAAQ,WACRa,YAAa,SAAAC,GAAQ,OAlFvC,SAA6BF,GACzB,IAAI,IAAIG,EAAG,EAAIA,EAAG7B,EAAc8B,OAAQD,IACtC,GAAI7B,EAAc6B,GAAGE,KAAOL,EAC1B,OAAO1B,EAAc6B,GAAGe,YA+EWC,CAAoBjB,KAExClD,EAAMgB,SAASyC,IAAI,SAAAC,GAAG,OACrBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUC,IAAKF,EAAKhB,MAAOgB,GACzBlC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAcD,IAAKF,EAAKI,QAASJ,EAAIQ,oBAOnD1C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAEChC,QAAQ,YACPiC,MAAM,UACRxC,UAAWN,EAAQnC,OACnBkF,QA1FZ,WAEIC,IAAMC,IAAI,qDAAuDxE,EAAMI,OAAOiD,IACpE,CACIhD,WACAoE,UAAW5D,EACXK,SAASA,IAEZwD,KAAK,SAAAC,GAAQ,OAAIjH,OAAOkH,MAAMD,EAASE,KAAKC,WAC5CC,MAAM,SAAAC,GAAG,OAAItH,OAAOkH,MAAMI,OA4E7B,qDCpGCC,6MAhFbC,MAAQ,CACNC,MAAO,GACPxE,UAAU,GACVK,SAAS,GACToE,OAAQ,gFAGC,IAAAC,EAAAC,KACTf,IAEGgB,IAlBS,0DAoBTb,KAAK,SAAAC,GACJU,EAAKG,SAAS,CACZL,MAAOR,EAASE,SAInBE,MAAM,SAAAC,GAAG,OAAItH,OAAOkH,MAAMI,4CAEhB,IAAAS,EAAAH,KACbf,IAEGgB,IA7BY,0DA+BZb,KAAK,SAAAC,GACJc,EAAKD,SAAS,CACZ7E,UAAWgE,EAASE,SAKvBE,MAAM,SAAAC,GAAG,OAAItH,OAAOkH,MAAMI,2CAGlB,IAAAU,EAAAJ,KACXf,IAEGgB,IA1CY,yDA4CZb,KAAK,SAAAC,GACJe,EAAKF,SAAS,CACbxE,SAAU2D,EAASE,SAIrBE,MAAM,SAAAC,GAAG,OAAItH,OAAOkH,MAAMI,iDAI7BM,KAAKK,WACLL,KAAKM,eACLN,KAAKO,+CAGE,IAAAC,EACgCR,KAAKJ,MAAnCC,EADFW,EACEX,MAAOxE,EADTmF,EACSnF,UAAWK,EADpB8E,EACoB9E,SAC3B,OACEQ,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,WAECF,EAAAC,EAAAC,cAACqE,EAAA,EAAD,MACAvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAQ9H,SAAS,YAClBsD,EAAAC,EAAAC,cAACuE,EAAA,EAAD,KACEzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAYtC,IAAI,UAAUxB,QAAQ,KAAKiC,MAAM,UAAU8B,QAAM,GAA7D,iCAMGhB,EAAM1B,IAAI,SAAA2C,GAAI,OACf5E,EAAAC,EAAAC,cAAC3B,EAAD,CAAUK,OAAQgG,EAAMzF,UAAWA,EAAWK,SAAUA,eAxElDd,IAAMmG,WCCxBC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SHgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.84cc5a35.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(4),\n    outline: 'none',\n  },\n\n  heading:{\n    padding: theme.spacing(0,25,0),\n  },\n\n  formControl: {\n    maxWidth: '100%',\n    minWidth: 150,\n    marginBottom: theme.spacing(2)\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  button: {\n    margin: theme.spacing(1,25,1),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  cardContent: {\n    flexGrow: 3,\n  },\n}));\n\nconst cards = [1];\n\nexport default function TeamCard(props) {\n\n  const [TeamLead, setTeamLead] = React.useState(props.teamid.TeamLead);\n\n  const [Employee,setEmployees] = React.useState(props.employees);\n\n  const [Projects, setProjects] = React.useState(props.projects);\n\n  var employeeArray=(props.employees).slice(0);\n  var projectsArray=(props.projects).slice(0);\n\n  function ChangeTeamLead(event) {\n    setTeamLead(event.target.value)\n  }\n\n  function ChangeEmployee(event) {\n    setEmployees(event.target.value)\n  }\n\n  function ChangeProject(event) {\n    setProjects(event.target.value)\n  }\n\n  const classes = useStyles();\n\n  function RetrieveTeamLeadName(id){\n\n    for(var i =0 ; i <employeeArray.length ;i++){\n      if (employeeArray[i]._id == id) {\n        return employeeArray[i].FirstName +\" \"+ employeeArray[i].LastName\n      }\n     \n    }\n  }\n\n  function RetrieveEmployeeName(id) {\n    for(var i =0 ; i <employeeArray.length ;i++){\n      if (employeeArray[i]._id == id) {\n        return employeeArray[i].FirstName +\" \"+ employeeArray[i].LastName\n      }\n   }\n  } \n\n  function RetrieveProjectName(id){\n      for(var i =0 ; i <projectsArray.length ;i++){\n        if (projectsArray[i]._id == id) {\n          return projectsArray[i].ProjectName\n        }\n    }\n  }\n\n  function Submit(){\n\n      axios.put('https://whispering-bayou-22423.herokuapp.com/team/' + props.teamid._id,\n                {\n                    TeamLead,\n                    Employees: Employee,\n                    Projects:Projects,\n                })\n                .then(response => window.alert(response.data.message))\n                .catch(err => window.alert(err))\n                \n  }\n\n\n  return (\n\n    <React.Fragment>\n      <main>\n        <Container className={classes.cardGrid} maxWidth=\"sm\">\n        <Card>\n          <CardContent className={classes.cardContent}>\n          <CardHeader className={classes.heading} title={props.teamid.TeamName}> </CardHeader>\n            \n      \n\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"team-lead-select\" >Team Lead</InputLabel>\n                    <Select  \n                    variant=\"outlined\"\n                    single=\"true\"\n                    autoWidth={true}\n                    value={TeamLead}\n                    onChange={ChangeTeamLead}\n                    input={<Input />}\n                    id=\"team-lead-select\"\n                    renderValue={selected => RetrieveTeamLeadName(selected)}>\n                        {\n                              props.employees.map(emp =>\n                                <MenuItem key={emp} value={emp}>\n                                  <ListItemText key={emp} primary={emp.FirstName + \" \" + emp.LastName} />\n                                </MenuItem>)       \n                        }\n                    </Select>\n                </FormControl>\n\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel  htmlFor=\"team-member-select\" >Members</InputLabel>\n                    <Select \n                    value={Employee}\n                    onChange={ChangeEmployee}\n                    multiple\n                    autoWidth={true}\n                    input={<Input />}\n                    id=\"team-member-select\"\n                    variant=\"outlined\"\n                    renderValue={selected => RetrieveEmployeeName(selected)}>\n                        {\n                         props.employees.map(emp =>\n                          <MenuItem key={emp} value={emp}>\n                            <ListItemText key={emp} primary={emp.FirstName + \" \" + emp.LastName} />\n                          </MenuItem>)       \n                        }\n                    </Select>\n                </FormControl>\n\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel  flex=\"true\" htmlFor=\"team-project-select\">Projects</InputLabel>\n                    <Select  \n                    id=\"team-project-select\"\n                    value={Projects}\n                    onChange={ChangeProject}\n                    single=\"true\" \n                    autoWidth={true} \n                    variant=\"outlined\"\n                    renderValue={selected => RetrieveProjectName(selected)}>\n                    {\n                         props.projects.map(emp =>\n                          <MenuItem key={emp} value={emp}>\n                            <ListItemText key={emp} primary={emp.ProjectName} />\n                          </MenuItem>) \n                                \n                        }\n                    </Select>\n                </FormControl>\n              </CardContent>\n              <Button\n                                \n               variant=\"contained\"\n                color=\"primary\"\n              className={classes.button}\n              onClick={Submit}>\n                            \n                Update\n              </Button>\n            </Card>\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n     \n}\n\n","import React from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport TeamCard from './Cards';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst APITeams ='https://whispering-bayou-22423.herokuapp.com/teams-raw';\n\nconst APIEmployee ='https://whispering-bayou-22423.herokuapp.com/employees';\n\nconst APIProjects ='https://whispering-bayou-22423.herokuapp.com/projects';\n\n\nclass App extends React.Component {\n  state = {\n    teams: [],\n    employees:[],\n    projects:[],\n    errors: null\n  };\n\n  getTeams() {\n    axios\n\n      .get(APITeams)\n\n      .then(response => {\n        this.setState({\n          teams: response.data,\n        });\n      })\n     \n      .catch(err => window.alert(err));\n  }\n  getEmployees() {\n    axios\n\n      .get(APIEmployee)\n  \n      .then(response => {\n        this.setState({\n          employees: response.data,\n        });\n      })\n     \n\n      .catch(err => window.alert(err) );\n  }\n\n  getProjects(){\n    axios\n   \n      .get(APIProjects)\n\n      .then(response => {\n        this.setState({\n         projects: response.data,\n        });\n      })\n\n      .catch(err => window.alert(err) );\n  }\n\n  componentDidMount() {\n    this.getTeams();\n    this.getEmployees();\n    this.getProjects();\n  }\n\n  render() {\n    const {  teams ,employees, projects} = this.state;\n    return (\n      <React.Fragment>\n        <div>\n\n         <CssBaseline />\n         <AppBar position=\"relative\">\n        <Toolbar> \n          <Typography key=\"heading\" variant=\"h6\" color=\"inherit\" noWrap>\n            Assignment 3 - Team Details\n          </Typography>\n        </Toolbar> \n       </AppBar>\n\n            {teams.map(team => \n            <TeamCard teamid={team} employees={employees} projects={projects}/>\n            )}\n\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n\n","/*********************************************************************************\n * WEB422 – Assignment 3\n * I declare that this assignment is my own work in accordance with Seneca Academic Policy.\n * No part of this assignment has been copied manually or electronically from any other source\n * (including web sites) or distributed to other students.\n *\n * Name:Salley Jeong Student ID: 111894150 Date: June 17,2019\n *\n ********************************************************************************/\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}